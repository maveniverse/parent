#
# Release workflow
# Calling it:
#   name: CI
#
#   on:
#     workflow_dispatch:
#       inputs:
#         version:
#           description: The version to release (will be inferred from the pom version by default).
#           required: false
#         next-version:
#           description: The next development version (will be inferred from the pom version by default).
#           required: false
#
#   jobs:
#     build:
#       name: Verify
#       uses: maveniverse/parent/.github/workflows/release.yml@release-29
#
# Secrets:
# - GPG_SIGNING_KEY (private key with armor)
# - GPG_PASSPHRASE (the private key passphrase)
# - GPG_KEY_FINGERPRINT (fingerprint and not hash)
# - MAVEN_USER (token user generated by central.sonatype.org)
# - MAVEN_PASSWORD (token password generated by central.sonatype.org)
#

name: Release

on:
  workflow_call:
    inputs:
      version:
        type: string
        description: The version to release (will be inferred from the pom version by default).
        required: false
      next-version:
        type: string
        description: The next development version (will be inferred from the pom version by default).
        required: false
      java-version:
        type: string
        description: The java version to use
        required: false
        default: 21
      distribution:
        type: string
        description: The java distribution to use.
        required: false
        default: temurin

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: ${{ github.event.inputs.distribution }}
          java-version: ${{ github.event.inputs.java-version }}
      - uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          fingerprint: ${{ secrets.GPG_KEY_FINGERPRINT }}
      - name: Release preparation
        id: pre-release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install valeriobelli/gh-milestone
          version=$(./mvnw -q -DforceStdout help:evaluate -N -Dexpression=project.version | sed -rn 's/([^-]+)(-SNAPSHOT|)$/\1/p')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Release
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          MAVEN_GPG_KEY_FINGERPRINT: ${{ secrets.GPG_KEY_FINGERPRINT }}
          MAVEN_USER: ${{ secrets.MAVEN_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: |
          ./mvnw -V -B release:prepare release:perform -DpushChanges -Darguments="-Dgpg.useagent=false -Dgpg.signer=bc" -s .github/release-settings.xml -DreleaseVersion=${{ github.event.inputs.version }} -DdevelopmentVersion=${{ github.event.inputs.next-version }}

      - name: Post release
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          version=${{ steps.pre-release.outputs.version }}
          echo "Trying to find milestone $version"
          milestone=$(gh milestone list --json id,title,state  --jq "map_values(select(.title == \"${version}\" and .state == \"OPEN\")).[].number")
          if [ ! -z "$milestone" ]; then
              echo "Found milestone $version, closing it"
              gh milestone edit $milestone --state closed
          fi

          version=$(./mvnw -q -DforceStdout --raw-streams help:evaluate -N -Dexpression=project.version | sed -rn 's/([^-]+)(-SNAPSHOT|)$/\1/p')
          echo "Preparing development $version"
          echo "Trying to find milestone $version"
          milestone=$(gh milestone list --json id,title,state  --jq "map_values(select(.title == \"${version}\" and .state == \"OPEN\")).[].number")
          if [ -z "$milestone" ]; then
              echo "Creating milestone $version"
              gh milestone create --title $version
          fi

          name=$(./mvnw -q -DforceStdout --raw-streams help:evaluate -N -Dexpression=project.name)
          version=${{ steps.pre-release.outputs.version }}
          tag=$(git describe --tags --abbrev=0)
          echo "Creating release \"$name $version\" from tag $tag"
          gh release create $tag --verify-tag --notes-from-tag --title "$name $version"